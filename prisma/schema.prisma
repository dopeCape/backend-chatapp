// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model HistoryEntryes {
  id        String      @unique @default(cuid())
  content   String
  type      GroupupType
  History   History?    @relation(fields: [historyId], references: [id])
  historyId String?
}

model History {
  id              String           @unique @default(cuid())
  user            chatWorkSpace    @relation(fields: [chatWorkSpaceId], references: [id])
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  entrys          HistoryEntryes[]
  chatWorkSpaceId String
}

model User {
  id              String        @unique() @default(cuid())
  email           String        @unique()
  name            String
  profilePic      String
  chatWorkSpaces  chatWorkSpace @relation(fields: [chatWorkSpaceId], references: [id], onDelete: Cascade)
  fireBaseid      String        @unique()
  admin           Boolean       @default(false)
  chatWorkSpaceId String        @unique
  groupChat       groupChat[]
  msges           msges[]
}

model Chat {
  id          String    @unique @default(cuid())
  updatedAt   DateTime? @default(now()) @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  typing      Boolean   @default(false)
  Friend      Friend[]
  msges       msges[]
}

model groupChat {
  name         String
  id           String               @id @unique @default(cuid())
  workspace    Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime?            @updatedAt
  type         GroupupType?
  visibility   GroupChatvisibility?
  admin        User                 @relation(fields: [userId], references: [id])
  msges        msges[]
  userId       String
  groupChatRef groupChatRef[]
}

enum type {
  MSG
  LINKMSG
  FILE
  IMG
  VIDEO
  CMD
  STICKER
  FORWARD
}

model msges {
  id          String     @id @unique @default(uuid())
  content     String
  isReply     Boolean?   @default(false)
  type        type
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @default(now())
  url         String?
  groupchat   groupChat? @relation(fields: [groupChatId], references: [id])
  from        User?      @relation(fields: [userId], references: [id])
  userId      String?
  chatId      String?
  groupChatId String?
  replys      msges[]    @relation("replay")
  reptedTO    msges?     @relation("replay", fields: [msgesId], references: [id])
  msgesId     String?
  Chat        Chat?      @relation(fields: [chatId], references: [id])
  forwarded   Boolean?
}

model Workspace {
  id            String          @id() @unique @default(cuid())
  name          String          @unique
  profilePic    String?
  topic         String?
  description   String?
  groupChat     groupChat[]
  Chat          Chat[]
  groupChatId   String[]
  chatWorkSpace chatWorkSpace[]
  Invites       Invites[]
  Friend        Friend[]
  History       History[]
}

model groupChatRef {
  id              String        @id @unique @default(cuid())
  muted           Boolean       @default(false)
  user            chatWorkSpace @relation(fields: [chatWorkSpaceId], references: [id], onDelete: Cascade)
  chatWorkSpaceId String
  groupChat       groupChat?    @relation(fields: [groupChatId], references: [id])
  groupChatId     String?
  unRead          Int           @default(0)
}

enum GroupChatvisibility {
  PUBLIC
  PRIVATE
}

enum Role {
  EXTERNAL
  MEMBER
}

enum GroupupType {
  GROUP
  CHANNEL
}

model Friend {
  id              String         @id @unique() @default(cuid())
  chat            Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  muted           Boolean        @default(false)
  chatId          String
  unRead          Int            @default(0)
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  chatWorkSpace   chatWorkSpace? @relation("me", fields: [chatWorkSpaceId], references: [id], onDelete: Cascade)
  chatWorkSpaceId String?
  friend          chatWorkSpace? @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId        String?
  workspaceId     String
}

model chatWorkSpace {
  id           String         @id() @unique @default(cuid())
  createdAt    DateTime       @default(now())
  role         Role
  workspaces   Workspace[]
  user         User?
  Friend       Friend[]       @relation("me")
  Wfriens      Friend[]       @relation("friend")
  groupChatRef groupChatRef[]
  History      History[]
}

model Invites {
  id        String      @id @unique @default(uuid())
  email     String      @unique
  workspace Workspace[]
  role      Role
}
