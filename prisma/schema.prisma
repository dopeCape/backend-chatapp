// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String        @unique() @default(cuid())
  email           String        @unique()
  name            String
  profilePic      String
  chatWorkSpaces  chatWorkSpace @relation(fields: [chatWorkSpaceId], references: [id], onDelete: Cascade)
  fireBaseid      String        @unique()
  admin           Boolean       @default(false)
  chatWorkSpaceId String        @unique
  msges           msges[]
  groupChat       groupChat[]
}

model Chat {
  id          String    @unique @default(cuid())
  updatedAt   DateTime? @default(now()) @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  typing      Boolean   @default(false)

  Friend Friend[]

  msges msges[]
}

model groupChat {
  name        String
  id          String          @id @unique @default(cuid())
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  user        chatWorkSpace[]
  admin       User            @relation(fields: [userId], references: [id])
  msges       msges[]
  userId      String
}

enum type {
  MSG
  LINK
  FILE
  REPLY
  IMG
  VIDEO
  CMD
}

model msges {
  id        String    @id @unique @default(uuid())
  content   String
  type      type
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  url       String?

  groupchat   groupChat? @relation(fields: [groupChatId], references: [id])
  from        User?      @relation(fields: [userId], references: [id])
  userId      String?
  chatId      String?
  groupChatId String?
  replys      msges[]    @relation("replay")
  msges       msges?     @relation("replay", fields: [msgesId], references: [id])
  msgesId     String?
  Chat        Chat?      @relation(fields: [chatId], references: [id])
}

model Workspace {
  id            String          @id() @unique @default(cuid())
  name          String          @unique
  groupChat     groupChat[]
  Chat          Chat[]
  groupChatId   String[]        @unique
  chatWorkSpace chatWorkSpace[]
  Invites       Invites[]
}

enum Role {
  EXTERNAL
  MEMBER
}

model Friend {
  id              String         @id @unique() @default(cuid())
  chat            Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String
  chatWorkSpace   chatWorkSpace? @relation("me", fields: [chatWorkSpaceId], references: [id], onDelete: Cascade)
  chatWorkSpaceId String?
  friend          chatWorkSpace? @relation("friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId        String?
}

model chatWorkSpace {
  id         String      @id() @unique @default(cuid())
  createdAt  DateTime    @default(now())
  role       Role
  workspaces Workspace[]
  groupChats groupChat[]
  user       User?
  Friend     Friend[]    @relation("me")
  Wfriens    Friend[]    @relation("friend")
}

model Invites {
  id        String      @id @unique @default(uuid())
  email     String      @unique
  workspace Workspace[]
  role      Role
}
